letter                  		    [a-zA-Z]
digit                   		    [0-9]
alphanumeric 					    ({letter}|{digit})
identifier						    {letter}{alphanumeric}*	    
sign 							    [+-]
int_literal             		    {sign}?{digit}+
double_literal          		    {sign}?{digit}+(\.){digit}+
string_literal          		    \"[^\"]*\"
char_literal					    '[^']?'
boolean_literal         		    (TRUE|FALSE)
line_comment					    \#\#([^\n])*
multi_comment					    \#\?([^?#])*\?\#
comment							    ({line_comment}|{multi_comment})
newline                   			\n

%option yylineno
%%
\(								    return(LP);
\)								    return(RP);
\{								    return(LB);
\}								    return(RB);
\= 								    return(ASSIGNMENT);
\+				       	           			 return(PLUS);	
\-				       	            return(MINUS);
\*								    return(MULTIPLICATION);
\/								    return(DIVISION);
\%								    return(MODULO);
\=\=					            return(EQUALITY);	
\!\=					            return(NOT_EQUAL);	
\<								    return(LESS_THAN);	
\<\=							    return(LESS_THAN_EQUAL);	
\>								    return(GREATER_THAN);	
\>\=							    return(GREATER_THAN_EQUAL);	
\*\=							    return(ASSIGNMENT_WITH_MULTIP);
\/\=							    return(ASSIGNMENT_WITH_DIVISION);
\+\=							    return(ASSIGNMENT_WITH_ADDITION);
\-\=							    return(ASSIGNMENT_WITH_SUBTRACTION);
\&\&							    return(AND);
\|\|							    return(OR);
\!								    return(NOT);
\$u								    return(UNION);
\$n								    return(INTERSECTION);
\$\\							        return(SET_DIFF);
\$x								    return(CARTESIAN_PRODUCT);
\$\=\=							    return(EQUAL_SET);
\$\=\=\=						    return(EQUIVALENT_SET);
\$\>						        return(SUPERSET);
\$\<                                return(SUBSET);
\$\<\<                              return(PROPER_SUBSET);
input                               return(INPUT_FUNCTION);   
display                             return(DISPLAY_FUNCTION);
add                                return(ADD_FUNCTION);
random_remove                                 return(RANDOM_REMOVE_FUNCTION);
remove                              return(REMOVE_FUNCTION);
is_singleton                        return(IS_SINGLETON_FUNCTION);
is_empty                            return(IS_EMPTY_FUNCTION);
cardinality						    return(CARDINALITY_FUNCTION);
filter                              return(FILTER_FUNCTION);
contains						    return(CONTAINS_FUNCTION);
copy                                return(COPY_FUNCTION);
\$o			            return(OVERLAPPING_FUNCTION);
\$d						    return(DISJOINT_FUNCTION);
delete                              return(DELETE_FUNCTION);
\<\<\<                              return(FILE_IN_FUNCTION);
\>\>\>                              return(FILE_OUT_FUNCTION);
\.								    return(DOT);
\,								    return(COMMA);
\; 								    return(SC);
\:                                  return(COLON);
for		                            return(FOR);
foreach						        return(FOREACH);
while							    return(WHILE);
if								    return(IF);
else_if							    return(ELSE_IF);
else 							    return(ELSE);
return							    return(RETURN);
print							    return(PRINT);
boolean				      		    return(BOOLEAN_TYPE);
string				      			return(STRING_TYPE);
double				      		    return(DOUBLE_TYPE);
int				      			    return(INT_TYPE);
char							    return(CHAR_TYPE);
set								    return(SET_TYPE);
void								return(VOID_TYPE);
main							    return(MAIN);
function						    return(FUNCTION);
{string_literal} 				    return(STRING_LITERAL);
{int_literal}           		    return(INT_LITERAL);
{double_literal}        		    return(DOUBLE_LITERAL);
{boolean_literal}				    return(BOOLEAN_LITERAL);
{char_literal}					    return(CHAR_LITERAL);
{identifier}					    return(IDENTIFIER);
\*{identifier}					    return(IDENTIFIER_SET);
\?{identifier}				        return(FUNCTION_NAME);
{comment}						    ;
{newline}               ;
[ \t]                   ;
.                       return(yytext[0]);
%%
int yywrap(){ return 1; }
